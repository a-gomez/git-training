Follow these steps to create your own training repository:

$ mkdir git-training
$ cd git-training
$ git init

These commands can (and probably should) be used frequently 
$ git status  # keep track of what has changed
$ git diff  # keep track of how it has changed

Create a readme file for the project, and add it to git

$ vim README
$ git commit -a -m "started describing setup process"  # this could be done into 2 steps
$ git log  
$ gitk &  # the ampersand creates a separate process

We're working in the dev branch, which was created and switched to like so:
$ git branch  # lists branchs
$ git branch dev  # creates a 'dev' branch
$ git checkout dev   # switches to this branch
$ vim README

And remember to commit your changes:
$ git commit -a -m 'added instructions for creating and switching branches'

Now it's time to add a file we don't want publicly available online:
$ vim auth.yml  # username and password go in this file
$ vim .gitignore  # add the following lines to this file:
  # ignore authorization files
  *.yml
$ git status

And, as usual, remember to add and commit:
$ git commit -a -m 'created .gitignore file for auth files'

Let's assume we've got a good chunk of stuff working now, and we want to merge back to the master:
$ git checkout master
$ git merge dev
